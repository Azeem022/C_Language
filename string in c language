# TO COUNT LENGTH OF A STRING:
  #include<stdio.h>
void printString (char arr[]);
int countLength (char arr[]);
int main()
{
	char name[100];
	fgets(name,100,stdin);
	printf("length is %d",countLength(name));
	return 0;
}
int countLength(char arr[]){
	int count=0;
	for (int i=0;arr[i]!='\0';i++){
		count++;
	}
	return count-1;
}
# using strlen function :
  #include<stdio.h>  
#include <string.h>    
int main(){    
char ch[20]={'j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't', '\0'};    
   printf("Length of string is: %d",strlen(ch));    
 return 0;    
}    
# C Copy String: strcpy()
  #include<stdio.h>  
#include <string.h>    
int main(){    
 char ch[20]={'j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't', '\0'};    
   char ch2[20];    
   strcpy(ch2,ch);    
   printf("Value of second string is: %s",ch2);    
 return 0;    
}    
# Strcat() function in C:
   #include<stdio.h>  
#include <string.h>    
int main(){    
  char ch[10]={'h', 'e', 'l', 'l', 'o', '\0'};    
   char ch2[10]={'c','a', '\0'};    
   strcat(ch,ch2);    
   printf("Value of first string is: %s",ch);    
 return 0;    
}    
#  Strcmp() function in C:
   #include<stdio.h>  
#include <string.h>    
int main(){    
  char str1[20],str2[20];    
  printf("Enter 1st string: ");    
  gets(str1);//reads string from console    
  printf("Enter 2nd string: ");    
  gets(str2);    
  if(strcmp(str1,str2)==0)    
      printf("Strings are equal");    
  else    
      printf("Strings are not equal");    
 return 0;    
}    
#  C Reverse String: strrev():
   #include<stdio.h>  
#include <string.h>    
int main(){    
  char str[20];    
  printf("Enter string: ");    
  gets(str);//reads string from console    
  printf("String is: %s",str);    
  printf("\nReverse String is: %s",strrev(str));    
 return 0;    
}    
# Strlwr() function in C:
  #include<stdio.h>  
#include <string.h>    
int main(){    
  char str[20];    
  printf("Enter string: ");    
  gets(str);//reads string from console    
  printf("String is: %s",str);    
  printf("\nLower String is: %s",strlwr(str));    
 return 0;    
}    
Output

Enter string: JAVATpoint
String is: JAVATpoint
Lower String is: javatpoint
#  C String Uppercase: strupr():
    #include<stdio.h>  
#include <string.h>    
int main(){    
  char str[20];    
  printf("Enter string: ");    
  gets(str);//reads string from console    
  printf("String is: %s",str);    
  printf("\nUpper String is: %s",strupr(str));    
 return 0;    
}    
Output

Enter string: javatpoint
String is: javatpoint
Upper String is: JAVATPOINT
################# Strstr() function in C:
  #include <stdio.h>  
#include <string.h>  
  
int main() {  
char str[100] = "this is javatpoint with c and java";  
char *sub;  
  
sub = strstr(str, "java");  
  
if (sub != NULL) {  
printf("Substring is: %s", sub);  
} else {  
printf("Substring not found.");  
}  
  
return 0;  
}  
Output:

Substring is: javatpoint with c and java
# Searching for a specific word within a given text:
  #include <stdio.h>  
#include <string.h>  
  
int main() {  
const char *text = "The quick brown fox leaps over the sleepy dog.";  
const char *word = "fox";  
  
char *result = strstr(text, word);  
  
if (result != NULL) {  
printf("Word '%s' found at index: %ld\n", word, result - text);  
} else {  
printf("Word '%s' not found.\n", word);  
}  
  
return 0;  
}  
Output:

Word' fox' found at index: 16

#malloc()
The malloc() function is used to allocate the memory during the execution of the program.
It does not initialize the memory but carries the garbage value.
It returns a null pointer if it could not be able to allocate the requested space.
Syntax

ptr = (cast-type*) malloc(byte-size) // allocating the memory using malloc() function.
All the values are allocated are initialized to garbage value.
EXAMPLE #include<stdio.h>
#include<stdlib.h>
int main()
{
	// use of malloc
	int *ptr;
	int n;
	printf("enter the size of array you want to create");
	scanf("%d",&n);
	ptr = (int *) malloc( n* sizeof(int));
	for(int i=0;i<n;i++){
		printf("enter the value no %d of this array\n",i);
		scanf("%d",&ptr[i]);
	}
	for(int i=0;i<n;i++){
	printf("the value at %d of this array %d\n",i,ptr[i]);
	}
	return 0;
}
OUTPUT
enter the size of array you want to create5
enter the value no 0 of this array
12
enter the value no 1 of this array
34
enter the value no 2 of this array
56
enter the value no 3 of this array
78
enter the value no 4 of this array
90
the value at 0 of this array 12
the value at 1 of this array 34
the value at 2 of this array 56
the value at 3 of this array 78
the value at 4 of this array 90

calloc()
#The calloc() is same as malloc() function, but the difference only is that it initializes the memory with zero value.
Syntax

ptr = (cast-type*)calloc(n, element-size);// allocating the memory using calloc() function.  
EXAMPLE 
#include<stdio.h>
#include<stdlib.h>
int main()
{
	// use of Calloc
	int *ptr;
	int n;
	printf("enter the size of array you want to create");
	scanf("%d",&n);
	ptr = (int *) calloc( n,sizeof(int));
	for(int i=0;i<n;i++){
		printf("enter the value no %d of this array\n",i);
		scanf("%d",&ptr[i]);
	}
	for(int i=0;i<n;i++){
	printf("the value at %d of this array %d\n",i,ptr[i]);
	}
	return 0;
}
OUTPUT  
/tmp/PaCY8sPRIB.o
enter the size of array you want to create5
enter the value no 0 of this array
1
enter the value no 1 of this array
2
enter the value no 2 of this array
3
enter the value no 3 of this array
4
enter the value no 4 of this array
5
the value at 0 of this array 1
the value at 1 of this array 2
the value at 2 of this array 3
the value at 3 of this array 4
the value at 4 of this array 5


